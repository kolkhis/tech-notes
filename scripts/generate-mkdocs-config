#!/bin/bash

set -euo pipefail

MKDOCS_FILE="./mkdocs.yml"
DOCS_DIR="./docs"

EXCLUDE_DIRS=(
    "venv"
    ".git"
    ".github"
    "."
    "ai"
    "ai/chatgpt_prompts"
    "proxmox"
    "skilstak"
    "pi"
    "nix"
    "api"
    "killercoda"
    "android"
    "api/product_manager"
    "api/security_architect"
    "api/design"
    "hax/htb"
    "hax/thm"
    "linux/mint"
    "linux/lfcs"
    "linux/labs"
    "linux/labs/linux"
    "linux/labs/hashicorp"
    "aws/cloud_quest"
    ""
)

generate_mkdocs_header() {
    cat <<EOF
site_name: Tech Notes by Kolkhis
repo_url: https://github.com/kolkhis/tech-notes
theme:
  name: material
  palette:
    scheme: slate

markdown_extensions:
  - codehilite
  - admonition
  - toc:
      permalink: true
  - pymdownx.superfences
  - pymdownx.keys
  - pymdownx.details
  - pymdownx.superfences
  - pymdownx.tabbed:
      alternate_style: true
  - pymdownx.inlinehilite
  - pymdownx.snippets
  - pymdownx.blocks.caption
  - tables
  - attr_list
  - md_in_html
  - def_list
  - pymdownx.tasklist:
      custom_checkbox: true
  - pymdownx.highlight:
      anchor_linenums: true
      line_spans: __span
      pygments_lang_class: true
  - pymdownx.emoji:
      emoji_index: !!python/name:material.extensions.emoji.twemoji
      emoji_generator: !!python/name:material.extensions.emoji.to_svg

features:
  - navigation.sections
  - navigation.expand
  - toc.integrate

nav:
  - Home: index.md
EOF
}

sanitize_title() {
    # Lowercase, replace _ or - with spaces
    echo "$1" | sed -E 's/[-_]/ /g' | awk '{for(i=1;i<=NF;++i) $i=(substr($i,1,1)) substr($i,2)} 1'
}

generate_nav_entries() {
    local base_dir="$1"
    local indent="  "

    # find "$base_dir" -type d | sort | 
    while read -r dir; do
        local rel_dir="${dir#./docs/}"

        [[ "${EXCLUDE_DIRS[*]}" =~ [[:space:]]${rel_dir}[[:space:]] || "$dir" == "$base_dir" ||
                -z "$rel_dir" || "$rel_dir" == "." ]] && continue

        local section_title
        section_title=$(sanitize_title "$rel_dir")

        local -a ENTRIES=()
        while read -r file; do
            local filename
            filename=$(basename "$file")
            [[ -z "$filename" ]] && continue

            # Let mkdocs infer titles from headers
            # local title
            # title=$(sanitize_title "${filename%%.*}")
            local relpath="${file#./docs/}"
            [[ -z "$relpath" ]] && continue

            ENTRIES+=("${indent}  - $relpath")
        done < <(find "$dir" -maxdepth 1 -type f -name "*.md" | sort)

        if [[ ${#ENTRIES[@]} -gt 0 ]]; then
            # Make 3 letter titles caps (AWS, VIM, SSH)
            [[ ${#section_title} -le 3 ]] &&
                section_title=${section_title^^} || section_title=${section_title^}

            if grep -qi '/' <<< "$section_title"; then # Section is in a subdirectory.
                # section_title=$(perl -pe 's,/, - ,g' <<< "${section_title^}")
                section_title=$(perl -pe 's,.*?/,,g' <<< "${section_title}")

                printf "%s  - %s:\n" "${indent}" "${section_title^}"
                printf '  %s\n' "${ENTRIES[@]}"
            else
                printf "%s- %s:\n" "${indent}" "${section_title^}"
                printf '%s\n' "${ENTRIES[@]}"
            fi
        fi

    done < <(find "$base_dir" -type d ! -path '*skilstak/*' | sort)
}

main() {
    printf "Generating mkdocs.yml at: %s\n" "$MKDOCS_FILE..."
    {
        generate_mkdocs_header
        generate_nav_entries "$DOCS_DIR"
    } > "$MKDOCS_FILE"
    printf "Done!\n"
}

main

